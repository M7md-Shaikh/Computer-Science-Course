package application;

import java.util.Arrays;
import java.util.Iterator;

public class MyArrayList<T> implements Iterable<T> {
	private Object[] elements;
	private int size = 0;
	private static final int DEFAULT_CAPACITY = 10;

	public MyArrayList() {
		elements = new Object[DEFAULT_CAPACITY];
	}

	public void add(T element) {
		if (size == elements.length) {
			ensureCapacity();
		}
		elements[size++] = element;
	}

	public T get(int index) {
		if (index >= size || index < 0) {
			throw new IndexOutOfBoundsException("Index: " + index + ", Size " + size);
		}
		return (T) elements[index];
	}

	public int size() {
		return size;
	}

	private void ensureCapacity() {
		int newSize = elements.length * 2;
		elements = Arrays.copyOf(elements, newSize);
	}

	@Override
	public Iterator<T> iterator() {
		return new ArrayIterator();
	}

	private class ArrayIterator implements Iterator<T> {
		private int currentIndex = 0;

		@Override
		public boolean hasNext() {
			return currentIndex < size;
		}

		@Override
		public T next() {
			if (!hasNext()) {
				throw new IndexOutOfBoundsException("No more elements to iterate.");
			}
			return (T) elements[currentIndex++];
		}
	}
}
