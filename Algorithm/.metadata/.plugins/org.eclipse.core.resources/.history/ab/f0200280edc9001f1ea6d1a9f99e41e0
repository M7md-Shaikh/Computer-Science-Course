
package application;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Dijkstra {
	static ArrayList<Country> Countrys = new ArrayList<Country>();
	static HashMap<String, Country> allNodes = new HashMap<>();
	private Country source;
	private Country destination;
	private PriorityQueue<Country> heap;
	private String pathString;
	String distanceString;
	String costString;
	String timeString;

	
	public Dijkstra() {
		// TODO Auto-generated constructor stub
	}

	public Dijkstra(ArrayList<Country> Countrys, Country source, Country destination) {// for each path between tow
																						// countries
		heap = new PriorityQueue<>(Countrys.size());// make an heap with countries number size
		this.destination = destination;
		this.Countrys = Countrys;
		for (Country country : Countrys) {// reset all countries cost
			country.resetTemps();// make all with max integer cost
			if (country == source) {
				country.setTempCost(0);// make the source country cost to zero
			}
			heap.add(country);// add all countries to the heap
		}
	}

	public void generateDijkstra(String criterion) {
	    while (!heap.isEmpty() && heap.contains(destination)) {
	        Country minUnknown = heap.poll();
	        LinkedList<Edge> adjacentsList = minUnknown.getAdjacentsList();
	        for (Edge edge : adjacentsList) {
	            Country adjacentCity = edge.getAdjacentCity();
	            double newCost = 0;
	            switch (criterion) {
	                case "distance":
	                    newCost = minUnknown.getTempCost() + edge.getDistance();
	                    break;
	                case "cost":
	                    newCost = minUnknown.getTempCost() + edge.getCost();
	                    break;
	                case "time":
	                    newCost = minUnknown.getTempCost() + edge.getTime();
	                    break;
	                default:
	                    throw new IllegalArgumentException("Invalid criterion: " + criterion);
	            }
	            if (newCost < adjacentCity.getTempCost()) {
	                heap.remove(adjacentCity);
	                adjacentCity.setTempCost(newCost);
	                adjacentCity.setTempPrev(minUnknown);
	                heap.add(adjacentCity);
	                System.out.println("Updated " + adjacentCity.getFullName() + " with new cost " + newCost + " via " + minUnknown.getFullName()); // Debug statement
	            }
	        }
	    }
	}


	public Country[] pathTo(Country destination) {
	    LinkedList<Country> countries = new LinkedList<>();
	    Country iterator = destination;
	    double totalDistance = 0;
	    double totalCost = 0;
	    double totalTime = 0;

	    pathString = ""; // Initialize pathString

	    while (iterator != null && iterator != source) {
	        countries.addFirst(iterator);
	        boolean foundEdge = false;
	        if (iterator.getTempPrev() != null) {
	            for (Edge edge : iterator.getTempPrev().getAdjacentsList()) {
	                if (edge.getAdjacentCity() == iterator) {
	                    totalDistance += edge.getDistance();
	                    totalCost += edge.getCost();
	                    totalTime += edge.getTime();
	                    pathString = iterator.getFullName() + ": " + String.format("%.2f", edge.getDistance()) + " KM\n"
	                            + "\t\t*  " + pathString;
	                    foundEdge = true;
	                    break;
	                }
	            }
	        iterator = iterator.getTempPrev();
	    }
	    if (source != null) {
	        pathString = source.getFullName() + ": Start\n" + pathString;
	    }

	    distanceString = String.format("%.2f", totalDistance);
	    costString = String.format("%.2f", totalCost);
	    timeString = String.format("%.2f", totalTime);

	    return countries.toArray(new Country[0]);
	}





	public String getPathString() {
	    if (countOccurrences(pathString, '\n') <= 0) {
	        pathString = "No Path";
	        distanceString = "\t\t\t------------------";
	    } else {
	        pathString = "\t" + pathString;
	        int truncateIndex = pathString.lastIndexOf('\n');
	        pathString = pathString.substring(0, truncateIndex);
	    }
	    return pathString + "\nTotal Distance: " + distanceString + " KM";
	}

	private static int countOccurrences(String haystack, char needle) {
	    int count = 0;
	    for (int i = 0; i < haystack.length(); i++) {
	        if (haystack.charAt(i) == needle) {
	            count++;
	        }
	    }
	    return count;
	}


	    public static ArrayList<Country> readFile() throws FileNotFoundException {
	        String line;
	        File file = new File("data.txt");
	        Scanner scan = new Scanner(file);

	        line = scan.nextLine().trim();
	        String[] str = line.split("\\s+");
	        int numberOfCountries = Integer.parseInt(str[0].trim());
	        int numberOfEdges = Integer.parseInt(str[1].trim());

	        for (int i = 0; i < numberOfCountries; i++) {
	            line = scan.nextLine().trim();
	            String[] countryData = line.split("\\s+");
	            String countryName = countryData[0];
	            float x = Float.parseFloat(countryData[1].trim());
	            float y = Float.parseFloat(countryData[2].trim());
	            Country country = new Country(countryName, x, y);
	            Countrys.add(country);
	            allNodes.putIfAbsent(countryName, country);
	        }

	        for (int i = 0; i < numberOfEdges; i++) {
	            if (scan.hasNextLine()) {
	                line = scan.nextLine().trim();
	                String[] edgeData = line.split("\\s+");
	                if (edgeData.length == 5) {
	                    String fromCityName = edgeData[0].trim();
	                    String toCityName = edgeData[1].trim();
	                    double cost = Double.parseDouble(edgeData[2].replace("$", "").trim());
	                    int time = Integer.parseInt(edgeData[3].trim());
	                    double distance = distance(allNodes.get(fromCityName).getX(), allNodes.get(fromCityName).getY(), allNodes.get(toCityName).getX(), allNodes.get(toCityName).getY());

	                    Country fromCity = allNodes.get(fromCityName);
	                    Country toCity = allNodes.get(toCityName);
	                    if (fromCity != null && toCity != null) {
	                        fromCity.addAdjacentCity(toCity, distance, cost, time); // Add a directed edge
	                    } else {
	                        System.err.println("Invalid city reference: " + line);
	                    }
	                } else {
	                    System.err.println("Invalid edge data: " + line);
	                }
	            } else {
	                System.err.println("Insufficient edge data lines.");
	                break;
	            }
	        }

	        scan.close();
	        return Countrys;
	    }

	

	public static double distance(double x1, double y1, double x2, double y2) {
		 return 6378.8
					* Math.acos((Math.sin(Math.toRadians(y1)) * Math.sin(Math.toRadians(y2)))
							+ Math.cos(Math.toRadians(y1)) * Math.cos(Math.toRadians(y2))
									* Math.cos(Math.toRadians(x1) - Math.toRadians(x2)));
		  }
	
	public String getDistanceString() {
	    return distanceString;
	}

	public String getCostString() {
	    return costString;
	}

	public String getTimeString() {
	    return timeString;
	}
	
}
